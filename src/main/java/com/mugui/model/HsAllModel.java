/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/package com.mugui.model;import com.mugui.Dui.DimgFile;import com.mugui.MAIN.MAIN;import com.mugui.Mail.MailBean;import com.mugui.Mail.SendMailToSomeone;import com.mugui.http.Bean.FishBean;import com.mugui.http.Bean.UserBean;import com.mugui.http.DataSave;import com.mugui.http.UserThread;import com.mugui.http.pack.TcpBag;import com.mugui.http.pack.UdpBag;import com.mugui.http.tcp.Bag;import com.mugui.http.tcp.TcpSocket;import com.mugui.http.tcp.TcpSocketUserBean;import com.mugui.model.FishPrice.YuAllBody;import com.mugui.model.FishPrice.YuBody;import com.mugui.tool.Other;import net.sf.json.JSONArray;import java.awt.image.BufferedImage;import java.io.BufferedWriter;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.PrintStream;import java.nio.channels.SocketChannel;import java.util.Iterator;import java.util.LinkedList;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import java.util.concurrent.ConcurrentHashMap;public class HsAllModel extends TCPModel {	static final String[] server_names = { "韩服", "台服", "私服", "国服", "steam服", "日服", "东南亚" };	public static int updateUserPawd(UserBean userBag, TcpSocketUserBean tcpsocket) {		if ((userBag.getUser_mail() == null) || (userBag.getCode() == null) || (userBag.getUser_passwd() == null) || (userBag.getUser_mail().equals(""))				|| (userBag.getCode().equals("")) || (userBag.getUser_passwd().equals("")) || (!(Other.isMailString(userBag.getUser_mail())))) {			return 1;		}		String s = (String) tcpsocket.getUserData("update_reg_code");		if (s == null) {			return 2;		}		if (!(s.equals(userBag.getCode()))) {			return 2;		}		tcpsocket.delUserData("update_reg_code");		if (SQLModel.updateUserPawd(userBag)) {			return 0;		}		return -1;	}	public static int updateRegCode(UserBean userBag, TcpSocketUserBean tcpsocket) {		String mail = userBag.getUser_mail();		if ((mail == null) || (mail.equals("")) || (!(Other.isMailString(mail)))) {			return 1;		}		String s = (String) tcpsocket.getUserData("update_reg_code");		if (s != null) {			return 0;		}		MailBean mailBean = new MailBean();		mailBean.setTitle("黑色沙漠咸鱼辅助系统");		mailBean.setSendTo(mail);		s = Other.getVerifyCode(8);		mailBean.setMailbody("咸鱼盒子群：304814727<br>本次操作验证码为： " + s);		if (new SendMailToSomeone().send(mailBean)) {			tcpsocket.addUserData("update_reg_code", s);			return 0;		}		tcpsocket.delUserData("update_reg_code");		return -1;	}	public static int updateLoginCode(UserBean userBag, TcpSocketUserBean tcpsocket) {		String mail = userBag.getUser_mail();		if ((mail == null) || (mail.equals("")) || (!(Other.isMailString(mail)))) {			return 1;		}		String s = (String) tcpsocket.getUserData("login_code");		if (s != null) {			return 0;		}		MailBean mailBean = new MailBean();		mailBean.setTitle("黑色沙漠咸鱼辅助系统");		mailBean.setSendTo(mail);		s = Other.getVerifyCode(8);		mailBean.setMailbody("咸鱼盒子群：304814727<br>本次操作验证码为： " + s);		if (new SendMailToSomeone().send(mailBean)) {			tcpsocket.addUserData("login_code", s);			return 0;		}		tcpsocket.delUserData("login_code");		return -1;	}	public static int getDstime(UserBean userBag) {		int time = SQLModel.getDsTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		time = SQLModel.getDyTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		time = SQLModel.getJgTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		time = SQLModel.getMyTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		time = SQLModel.getQpTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		time = SQLModel.getLjTime(userBag.getUser_mail());		if (time > 0) {			return time;		}		return 0;	}	public static byte[] sendFishLineFeature(byte[] body, String server_name, DInt index) {		DataOutputStream bytebody = null;		ByteArrayOutputStream arrayOutputStream = null;		try {			BufferedImage image = Other.byteArrayToImg(body);			if (image == null) {				throw new NullPointerException("图片为空");			}			int server_id = -1;			for (int i = 0; i < server_names.length; ++i) {				if (server_name.trim().equals(server_names[i])) {					server_id = i;				}			}			if (server_id == -1)				return null;			index.setI(FishPrice.saveLine(image, server_id));			Iterator iterator = FishPrice.getAllLine();			arrayOutputStream = new ByteArrayOutputStream();			bytebody = new DataOutputStream(arrayOutputStream);			while (iterator.hasNext()) {				Map.Entry entry = (Map.Entry) iterator.next();				if (((FishPrice.YuAllBody) entry.getValue()).xianluBody.server_id != server_id)					continue;				byte[] bb = Other.ImgToByteArray(((FishPrice.YuAllBody) entry.getValue()).xianluBody.yuan);				bytebody.writeInt(((Integer) entry.getKey()).intValue());				bytebody.writeLong(((FishPrice.YuAllBody) entry.getValue()).xianluBody.time);				bytebody.writeInt(bb.length);				bytebody.write(bb);			}			return arrayOutputStream.toByteArray();		} catch (IOException e) {			e.printStackTrace();		} catch (SecurityException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		} finally {			try {				if (bytebody != null)					bytebody.close();				if (arrayOutputStream != null)					arrayOutputStream.close();			} catch (IOException e) {				e.printStackTrace();			}		}		return null;	}	public static boolean sendLineAllFishPrice(byte[] bb, int line_index) {		// 存贮所有的新的鱼价		YuAllBody allBody = FishPrice.allbody.get(line_index);		if (allBody == null)			return false;		allBody.xianluBody.time = System.currentTimeMillis();		allBody.body.clear();		ByteArrayInputStream tByteArrayInputStream = new ByteArrayInputStream(bb);		DataInputStream inputStream = new DataInputStream(tByteArrayInputStream);		try {			while (true) {				int key = inputStream.readInt();				FishBean bean = new FishBean();				bean.setFish_price(inputStream.readInt());				int leng = inputStream.readInt();				byte b[] = new byte[leng];				inputStream.read(b);				bean.setFish_name(new String(b, "UTF-8"));				leng = inputStream.readInt();				b = new byte[leng];				inputStream.read(b);				bean.setFish_name_img(Other.byteArrayToImg(b));				leng = inputStream.readInt();				b = new byte[leng];				inputStream.read(b);				bean.setFish_img(Other.byteArrayToImg(b));				YuBody body = new YuBody(bean);				allBody.body.put(key, body);			}		} catch (Exception e) {			return true;		}	}	public static void sendAllNewFishUpdate(int line_index) {		FishPrice.XianluBody xianluBody = FishPrice.getLineFeature(line_index);		byte[] b = Other.ImgToByteArray(xianluBody.yuan);		SendAllUser(22, b, line_index + ":" + xianluBody.time + ":" + xianluBody.server_id, 1);	}	public static byte[] getLineAllFishPrice(Integer body_description) {		return FishPrice.getLineAllBody(body_description.intValue());	}	public static int sendBoldOne(BufferedImage img, String server_name) {		int server_id = -1;		for (int i = 0; i < server_names.length; ++i) {			if (server_name.trim().equals(server_names[i])) {				server_id = i;			}		}		if (server_id == -1) {			return server_id;		}		System.out.println("更新黄金钟时间");		return FishPrice.sendBoldeOne(img, server_id);	}	public static void sendBoldNewLineUpdate(int line_index) {		FishPrice.XianluBody xianluBody = FishPrice.getLineFeature(line_index);		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();		DataOutputStream outputStream2 = new DataOutputStream(outputStream);		try {			outputStream2.writeInt(line_index);			outputStream2.writeLong(xianluBody.bold_time);			outputStream2.write(Other.ImgToByteArray(xianluBody.yuan));			SendAllUser(25, outputStream.toByteArray(), null, 1);			System.out.println("发送更新黄金钟给所有人");		} catch (Exception localException) {		} finally {			if (outputStream2 != null)				try {					outputStream2.close();				} catch (IOException e) {					e.printStackTrace();				}			if (outputStream != null)				try {					outputStream.close();				} catch (IOException e) {					e.printStackTrace();				}		}	}	public static void SendAllUser(int bag_id, Object body, String string, int type) {		Iterator<String> user_mails = com.mugui.http.DataSave.getUserAll();		TcpBag tcpBag = new TcpBag();		UdpBag udpBag = new UdpBag();		tcpBag.setBag_id(bag_id);		udpBag.setBag_id(bag_id);		tcpBag.setBody(body);		tcpBag.setBody_description(string);		udpBag.setBody(body);		udpBag.setBody_description(string);		while (user_mails.hasNext()) {			String mail = user_mails.next();			TcpSocketUserBean tcpSocket = DataSave.getTcpSocket(mail);			if ((tcpSocket != null) && (tcpSocket.isSocketRun())) {				switch (type) {				case 0:					sendBean(tcpBag, tcpSocket);					break;				case 1:					sendBean(tcpBag, tcpSocket);					break;				}			} else {				UdpBag bag = com.mugui.http.DataSave.getUDPSocket(mail);				if ((bag != null) && (bag.getUser_id() != null) && (!(bag.getUser_id().trim().equals("")))) {					udpBag.setUser_to(bag.getUser_to());					udpBag.setUser_id("Admin");					udpBag.setHost(bag.getHost());					udpBag.setPort(bag.getPort());					switch (type) {					case 0:						MAIN.udpSocket.Send(udpBag);						break;					case 1:						MAIN.udpSocket.SendByteArrays(udpBag);					}				}			}		}	}	public static String getBoldLines(String server_name) {		Iterator iterator = FishPrice.allbody.entrySet().iterator();		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream));		int server_id = -1;		for (int i = 0; i < server_names.length; ++i) {			if (server_name.trim().equals(server_names[i])) {				server_id = i;			}		}		if (server_id == -1) {			return null;		}		System.out.println("得到" + server_name + "黄金钟" + server_id);		String body = null;		try {			while (iterator.hasNext()) {				Map.Entry entry = (Map.Entry) iterator.next();				if ((((FishPrice.YuAllBody) entry.getValue()).xianluBody.server_id != server_id)						|| (System.currentTimeMillis() - ((FishPrice.YuAllBody) entry.getValue()).xianluBody.bold_time > 3600000L))					continue;				writer.append(entry.getKey() + ":" + ((FishPrice.YuAllBody) entry.getValue()).xianluBody.bold_time);				writer.newLine();			}			writer.close();			body = new String(outputStream.toByteArray());		} catch (Exception e) {			e.printStackTrace();		} finally {			if (writer != null) {				try {					writer.close();				} catch (IOException e) {					e.printStackTrace();				}			}			if (outputStream != null) {				try {					outputStream.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}		return body;	}	public static int sendDelBoldOne(Integer body, String body_description) {		FishPrice.XianluBody yuAllBody = FishPrice.getLineFeature(body.intValue());		if (yuAllBody == null)			return -1;		yuAllBody.bold_time = 0L;		return body.intValue();	}	public static boolean login(UserBean userBag, TcpSocketUserBean tcpsocket) {		int key = 0;		String temp_id = userBag.getUser_sequence();		if ((temp_id == null) || (temp_id.equals("")) || (!(Other.isInteger(temp_id))))			key = 0;		else {			key = Integer.parseInt(temp_id);		}		switch (key) {		case 1:			return ZYLogin(userBag);		case 2:			return BDLogin(userBag);		default:			String code = (String) tcpsocket.getUserData("login_code");			if (code != null) {				if (code.equals(userBag.getUser_passwd().trim())) {					return true;				} else {					tcpsocket.delUserData("login_code");					return false;				}			}			if (SQLModel.login(userBag)) {				tcpsocket.delUserData("login_code");				return true;			}			return false;		}		// return false;	}	private static boolean BDLogin(UserBean userBag) {		return false;	}	private static boolean ZYLogin(UserBean userBag) {		return false;	}	static class DInt {		private int i = 0;		public DInt(int i) {			this.i = i;		}		public int getI() {			return this.i;		}		public void setI(int i) {			this.i = i;		}	}	public static void sendNewBossUpdateTime(Object body, Object body_description) {		System.out.println("得到一个boss的刷新" + body_description);		UserBean bean = UserBean.newInstanceBean(UserBean.class, body_description);		String s[] = body.toString().replaceAll("\"", "").split(":");		System.out.println("得到一个boss的刷新2" + body.toString() + s[0] + s[1]);		if (BossModel.isUpdateTime(s[1].trim(), Integer.parseInt(s[0].trim()))) {			DimgFile file = BossModel.updateTime(s[1].trim(), Integer.parseInt(s[0].trim()), bean);			body = file.objectPRI + ":" + file.objectname + ":" + file.objectcolor + ":" + file.objectlevel + ":"					+ server_names[Integer.parseInt(file.objecttype)];			// 向所有人发送这个boss的刷新			System.out.println("向所有人发送这个boss的刷新");			SendAllUser(Bag.SEND_BOSS_UPDATE_ONE, body, null, 0);		}	}	public static JSONArray getAllBossUpdateTime(int parseInt) {		System.out.println("得到改线路的boss" + parseInt);		JSONArray array = new JSONArray();		int server_id = FishPrice.getLineFeature(parseInt).server_id;		ConcurrentHashMap<String, Object> dimgFiles = BossModel.getAllUpdateTime(server_id);		if (dimgFiles == null)			return null;		boolean bool = false;		try {			Iterator<Object> iterator = dimgFiles.values().iterator();			while (iterator.hasNext()) {				Object object = iterator.next();				DimgFile dimgFile = null;				if (object instanceof DimgFile) {					dimgFile = (DimgFile) object;					String body = dimgFile.objectPRI + ":" + dimgFile.objectname + ":" + dimgFile.objectcolor + ":" + dimgFile.objectlevel + ":"							+ server_names[Integer.parseInt(dimgFile.objecttype)];					array.add(body);					bool = true;				} else {					@SuppressWarnings("unchecked")					ConcurrentHashMap<Integer, DimgFile> concurrentHashMap = (ConcurrentHashMap<Integer, DimgFile>) object;					Iterator<DimgFile> iterator2 = concurrentHashMap.values().iterator();					JSONArray array2 = new JSONArray();					while (iterator2.hasNext()) {						dimgFile = (DimgFile) iterator2.next();						String body = dimgFile.objectPRI + ":" + dimgFile.objectname + ":" + dimgFile.objectcolor + ":" + dimgFile.objectlevel + ":"								+ server_names[Integer.parseInt(dimgFile.objecttype)];						array2.add(body);						bool = true;					}					array.add(array2);				}			}		} catch (Exception e) {			e.printStackTrace();		}		System.out.println("发送boss" + array.toString());		return bool ? array : null;	}	public static int getLjTime(UserBean userBag) {		return SQLModel.getLjTime(userBag.getUser_mail());	}}